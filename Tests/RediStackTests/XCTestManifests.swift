#if !canImport(ObjectiveC)
import XCTest

extension BasicCommandsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BasicCommandsTests = [
        ("test_delete", test_delete),
        ("test_echo", test_echo),
        ("test_expire", test_expire),
        ("test_ping", test_ping),
        ("test_scan", test_scan),
        ("test_select", test_select),
        ("test_swapDatabase", test_swapDatabase),
    ]
}

extension HashCommandsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__HashCommandsTests = [
        ("test_hdel", test_hdel),
        ("test_hexists", test_hexists),
        ("test_hgetall", test_hgetall),
        ("test_hget", test_hget),
        ("test_hincrby", test_hincrby),
        ("test_hincrbyfloat", test_hincrbyfloat),
        ("test_hkeys", test_hkeys),
        ("test_hlen", test_hlen),
        ("test_hmget", test_hmget),
        ("test_hmset", test_hmset),
        ("test_hscan", test_hscan),
        ("test_hset", test_hset),
        ("test_hsetnx", test_hsetnx),
        ("test_hstrlen", test_hstrlen),
        ("test_hvals", test_hvals),
    ]
}

extension ListCommandsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ListCommandsTests = [
        ("test_blpop", test_blpop),
        ("test_brpop", test_brpop),
        ("test_brpoplpush", test_brpoplpush),
        ("test_lindex", test_lindex),
        ("test_linsert", test_linsert),
        ("test_llen", test_llen),
        ("test_lpop", test_lpop),
        ("test_lpush", test_lpush),
        ("test_lpushx", test_lpushx),
        ("test_lrange", test_lrange),
        ("test_lrem", test_lrem),
        ("test_lset", test_lset),
        ("test_rpop", test_rpop),
        ("test_rpoplpush", test_rpoplpush),
        ("test_rpush", test_rpush),
        ("test_rpushx", test_rpushx),
    ]
}

extension RESPTranslatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RESPTranslatorTests = [
        ("testParsing_array_nested", testParsing_array_nested),
        ("testParsing_array_recursively", testParsing_array_recursively),
        ("testParsing_array_whenEmpty", testParsing_array_whenEmpty),
        ("testParsing_array_whenNull", testParsing_array_whenNull),
        ("testParsing_array_withMixedTypes", testParsing_array_withMixedTypes),
        ("testParsing_array_withNullElements", testParsing_array_withNullElements),
        ("testParsing_arrays_chunked", testParsing_arrays_chunked),
        ("testParsing_arrays", testParsing_arrays),
        ("testParsing_bulkString_missingEndings", testParsing_bulkString_missingEndings),
        ("testParsing_bulkString_null", testParsing_bulkString_null),
        ("testParsing_bulkString_rawBytes", testParsing_bulkString_rawBytes),
        ("testParsing_bulkString_recursively", testParsing_bulkString_recursively),
        ("testParsing_bulkString_withContent", testParsing_bulkString_withContent),
        ("testParsing_bulkString_withNoSize", testParsing_bulkString_withNoSize),
        ("testParsing_bulkStrings_chunked", testParsing_bulkStrings_chunked),
        ("testParsing_bulkStrings", testParsing_bulkStrings),
        ("testParsing_error", testParsing_error),
        ("testParsing_integer_chunked", testParsing_integer_chunked),
        ("testParsing_integer_missingBytes", testParsing_integer_missingBytes),
        ("testParsing_integer_recursively", testParsing_integer_recursively),
        ("testParsing_integer_withAllBytes", testParsing_integer_withAllBytes),
        ("testParsing_integer", testParsing_integer),
        ("testParsing_invalidSymbols", testParsing_invalidSymbols),
        ("testParsing_simpleString_chunked", testParsing_simpleString_chunked),
        ("testParsing_simpleString_handlesRecursion", testParsing_simpleString_handlesRecursion),
        ("testParsing_simpleString_missingNewline", testParsing_simpleString_missingNewline),
        ("testParsing_simpleString_withContent", testParsing_simpleString_withContent),
        ("testParsing_simpleString_withNoContent", testParsing_simpleString_withNoContent),
        ("testParsing_simpleString", testParsing_simpleString),
        ("testWriting_arrays", testWriting_arrays),
        ("testWriting_bulkStrings", testWriting_bulkStrings),
        ("testWriting_errors", testWriting_errors),
        ("testWriting_foundationData", testWriting_foundationData),
        ("testWriting_integers", testWriting_integers),
        ("testWriting_null", testWriting_null),
        ("testWriting_simpleStrings", testWriting_simpleStrings),
    ]
}

extension RedisByteDecoderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RedisByteDecoderTests = [
        ("test_badMessage_throws", test_badMessage_throws),
        ("test_complete_continues", test_complete_continues),
        ("test_complete_movesReaderIndex", test_complete_movesReaderIndex),
        ("test_partial_needsMoreData", test_partial_needsMoreData),
        ("testAll", testAll),
        ("testArrays", testArrays),
        ("testBulkStrings", testBulkStrings),
        ("testErrors", testErrors),
        ("testIntegers", testIntegers),
        ("testSimpleStrings", testSimpleStrings),
    ]
}

extension RedisConnectionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RedisConnectionTests = [
        ("test_callingCloseMultipleTimes", test_callingCloseMultipleTimes),
        ("test_sendingCommandAfterClosing", test_sendingCommandAfterClosing),
        ("test_unexpectedChannelClose", test_unexpectedChannelClose),
    ]
}

extension RedisMessageEncoderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RedisMessageEncoderTests = [
        ("testArrays", testArrays),
        ("testBulkStrings", testBulkStrings),
        ("testError", testError),
        ("testIntegers", testIntegers),
        ("testNull", testNull),
        ("testSimpleStrings", testSimpleStrings),
    ]
}

extension SetCommandsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SetCommandsTests = [
        ("test_sadd", test_sadd),
        ("test_scard", test_scard),
        ("test_sdiff", test_sdiff),
        ("test_sdiffstore", test_sdiffstore),
        ("test_sinter", test_sinter),
        ("test_sinterstore", test_sinterstore),
        ("test_sismember", test_sismember),
        ("test_smembers", test_smembers),
        ("test_smove", test_smove),
        ("test_spop", test_spop),
        ("test_srandmember", test_srandmember),
        ("test_srem", test_srem),
        ("test_sscan", test_sscan),
        ("test_sunion", test_sunion),
        ("test_sunionstore", test_sunionstore),
    ]
}

extension SortedSetCommandsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SortedSetCommandsTests = [
        ("test_bzpopmax", test_bzpopmax),
        ("test_bzpopmin", test_bzpopmin),
        ("test_zadd", test_zadd),
        ("test_zcard", test_zcard),
        ("test_zcount", test_zcount),
        ("test_zincrby", test_zincrby),
        ("test_zinterstore", test_zinterstore),
        ("test_zlexcount", test_zlexcount),
        ("test_zpopmax", test_zpopmax),
        ("test_zpopmin", test_zpopmin),
        ("test_zrange", test_zrange),
        ("test_zrangebylex", test_zrangebylex),
        ("test_zrangebyscore", test_zrangebyscore),
        ("test_zrank", test_zrank),
        ("test_zrem", test_zrem),
        ("test_zremrangebylex", test_zremrangebylex),
        ("test_zremrangebyrank", test_zremrangebyrank),
        ("test_zremrangebyscore", test_zremrangebyscore),
        ("test_zrevrange", test_zrevrange),
        ("test_zrevrangebylex", test_zrevrangebylex),
        ("test_zrevrangebyscore", test_zrevrangebyscore),
        ("test_zrevrank", test_zrevrank),
        ("test_zscan", test_zscan),
        ("test_zscore", test_zscore),
        ("test_zunionstore", test_zunionstore),
    ]
}

extension StringCommandsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringCommandsTests = [
        ("test_append", test_append),
        ("test_decrement", test_decrement),
        ("test_decrementBy", test_decrementBy),
        ("test_get", test_get),
        ("test_increment", test_increment),
        ("test_incrementBy", test_incrementBy),
        ("test_incrementByFloat", test_incrementByFloat),
        ("test_mget", test_mget),
        ("test_mset", test_mset),
        ("test_msetnx", test_msetnx),
        ("test_set", test_set),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(BasicCommandsTests.__allTests__BasicCommandsTests),
        testCase(HashCommandsTests.__allTests__HashCommandsTests),
        testCase(ListCommandsTests.__allTests__ListCommandsTests),
        testCase(RESPTranslatorTests.__allTests__RESPTranslatorTests),
        testCase(RedisByteDecoderTests.__allTests__RedisByteDecoderTests),
        testCase(RedisConnectionTests.__allTests__RedisConnectionTests),
        testCase(RedisMessageEncoderTests.__allTests__RedisMessageEncoderTests),
        testCase(SetCommandsTests.__allTests__SetCommandsTests),
        testCase(SortedSetCommandsTests.__allTests__SortedSetCommandsTests),
        testCase(StringCommandsTests.__allTests__StringCommandsTests),
    ]
}
#endif
