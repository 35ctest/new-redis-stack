include: '/.gitlab-ci/test-template.yml'

stages:
  - Platform Tests
  - Quality Checks
  - LLVM test
  - Docs
 
pages:
  stage: Docs
  only:
    - tags
  image: norionomura/jazzy
  tags:
    - docker
  variables:
    MODULE_NAME: "RediStack"
    REPO_URL: "https://gitlab.com/mordil/swift-redi-stack"
  script: |
    export VERSION=$(git describe --abbrev=0 --tags || echo "0.0.0")
    swift build
    sourcekitten doc --spm-module "$MODULE_NAME" > "./$MODULE_NAME.json"
    jazzy --clean \
          --author "Nathan Harris (Mordil)" \
          --readme "./README.md" \
          --author_url "https://www.mordil.info" \
          --github_url "$REPO_URL" \
          --github-file-prefix "$REPO_URL/blob/$VERSION" \
          --root-url "https://mordil.gitlab.io/swift-redi-stack/" \
          --module "$MODULE_NAME" \
          --module-version "$VERSION" \
          --theme docs/theme \
          --sourcekitten-sourcefile "./$MODULE_NAME.json" \
          --output "./public"
  artifacts:
    paths:
      - public

Code Climate:
  only:
    - branches
    - tags
  except:
    - schedules
  stage: Quality Checks
  image: docker:stable
  services:
    - docker:stable-dind
  variables:
    DOCKER_DRIVER: overlay2
    CODE_QUALITY_IMAGE: "registry.gitlab.com/gitlab-org/security-products/codequality:latest"
  script:
    - docker pull --quiet "$CODE_QUALITY_IMAGE"
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "$CODE_QUALITY_IMAGE" /code
  artifacts:
    expire_in: 1 week
    reports:
      codequality: gl-code-quality-report.json

Code Coverage:
#   # only:
#   #   changes:
#   #     - "*.swift"
#   except:
#     - schedules
  extends: .unit-test
  stage: Quality Checks
  image: registry.gitlab.com/mordil/swift-redi-stack/swift:5.1
#   before_script:
#     - apt-get update
#     - apt-get install -y curl
  script: |
    llvm-cov --version
    
    swift test --enable-code-coverage

#     echo "CHILDREN: .build"
#     ls .build

#     echo "CHILDNEN: .build/x86_64-unknown-linux"
#     ls .build/x86_64-unknown-linux

#     echo "CHILDREN: .build/x86_64-unknown-linux/debug"
#     ls .build/x86_64-unknown-linux/debug
    
#     BINARY_PATH=".build/x86_64-unknown-linux/debug/redi-stackPackageTests.xctest"
#     PROF_DATA_PATH=".build/x86_64-unknown-linux/debug/codecov/default.profdata"
#     IGNORE_FILENAME_REGEX="(.build|TestUtils|Tests)"

#     echo "Snooping"
#     echo "Profdata: " $(ls -l $PROF_DATA_PATH)
#     echo "Test binary: " $(ls -l $BINARY_PATH)
    
#     llvm-cov report \
#       $BINARY_PATH \
#       --format=text \
#       -instr-profile="$PROF_DATA_PATH" \
#       -ignore-filename-regex="$IGNORE_FILENAME_REGEX"

#     llvm-cov show \
#       $BINARY_PATH \
#       -instr-profile="$PROF_DATA_PATH" \
#       -ignore-filename-regex="$IGNORE_FILENAME_REGEX" > coverage.txt

#     bash <(curl -s https://codecov.io/bash) \
#       -J "RediStack" \
#       -D ".build/debug"
  artifacts:
    expire_in: 1 hour
    paths:
      - .build/

LLVM:
  image: ubuntu:latest
  stage: LLVM test
  needs: ["Code Coverage"]
  before_script:
    - apt-get update
    - apt-get install -y llvm-8 llvm-9
  script: |
    BINARY_PATH=".build/x86_64-unknown-linux/debug/redi-stackPackageTests.xctest"
    PROF_DATA_PATH=".build/x86_64-unknown-linux/debug/codecov/default.profdata"
    IGNORE_FILENAME_REGEX="(.build|TestUtils|Tests)"

    echo "Snooping"
    echo "Profdata: " $(ls -l $PROF_DATA_PATH)
    echo "Test binary: " $(ls -l $BINARY_PATH)

    LLVM_COV_TOOLS=("llvm-cov-8" "llvm-cov-9")
    for LLVM_COV in "${LLVM_COV_TOOLS[@]}"
    do
      if which $LLVM_COV > /dev/null;
      then
        $LLVM_COV report \
          $BINARY_PATH \
          --format=text \
          -instr-profile="$PROF_DATA_PATH" \
          -ignore-filename-regex="$IGNORE_FILENAME_REGEX"
      else
        echo "${LLVM_COV} NOT FOUND"
      fi
    done
  dependencies:
    - Code Coverage

Ubuntu Bionic:
  stage: Platform Tests
  trigger:
    strategy: depend
    include: '/.gitlab/ci/ubuntu-bionic.yml'

Ubuntu Xenial:
  stage: Platform Tests
  trigger:
    strategy: depend
    include: '/.gitlab/ci/ubuntu-xenial.yml'

Ubuntu Focal:
  stage: Platform Tests
  trigger:
    strategy: depend
    include: '/.gitlab/ci/ubuntu-focal.yml'

CentOS 8:
  stage: Platform Tests
  trigger:
    strategy: depend
    include: '/.gitlab/ci/centos-8.yml'

Amazon Linux 2:
  stage: Platform Tests
  trigger:
    strategy: depend
    include: '/.gitlab/ci/amazonlinux-2.yml'
